#!/usr/bin/env bash

pre_lock() {
  # enable dpms timers
  xset dpms 15 0 0

  # add some sleep to prevent red-mode in screenshot
  sleep 0.1
}

post_lock() {
  # restore dpms settings
  xset -dpms
}

kill_i3lock() {
  pkill -u "$USER" "$@" -x i3lock
}

lock() {
  # We set a trap to kill the locker if we get killed, then start the locker and
  # wait for it to exit. The waiting is not that straightforward when the locker
  # forks, so we use this polling only if we have a sleep lock to deal with.
  if [[ -e "/dev/fd/${XSS_SLEEP_LOCK_FD:--1}" ]]; then
    # trap kill script
    trap kill_i3lock TERM INT

    # we have to make sure the locker does not inherit a copy of the lock fd
    $i3lock_command {XSS_SLEEP_LOCK_FD}<&-

    # add some sleep to prevent race conditions
    sleep 1

    # now close our fd (only remaining copy) to indicate we're ready to sleep
    exec {XSS_SLEEP_LOCK_FD}<&-

    # poll to check if i3lock has exited
    while kill_i3lock -0; do
      sleep 0.5
    done
  else
    # proceed with no-forking and trap
    trap 'kill %%' TERM INT
    $i3lock_command -n &
    wait
  fi
}

main() {
  # define command to be re-used
  i3lock_command="i3lock-fancy-rapid 5 3"

  # main logic
  if ! kill_i3lock -0; then
    trap post_lock TERM INT
    pre_lock
    lock
    post_lock
  fi
}

main
